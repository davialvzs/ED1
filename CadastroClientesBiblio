#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>
#include <ctype.h>

//----------------------------------------------------
#ifdef _WIN32
    #define limpa_tela() system("cls")
#else
    #define limpa_tela() system("clear")
#endif
//----------------------------------------------------

typedef struct usuario {
    char nome[50];
    char telefone[20];
    char email[50];
    char nascimento[20];
    struct usuario *anterior;
    struct usuario *proximo;
} usuario;

usuario *inicio = NULL;

//-----------------------------------------------------

void ascii() {
    printf("\n");
    printf("    .--.                   .---.                  .--.             \n");
    printf(".---||           .-.     |~|              .---||            \n");
    printf("|===|--|_          |_|     |~|--.   .---.   |===|--|       .----.         \n");
    printf("|===|  |'\\     .---!~|  .--|   |--|---|   |---|===|  |       |====|         \n");       
    printf("|   |  |.'\\    |===| |--|  |   |  |   |~|===|   |  |.'\\    |====|   \n");
    printf("|   |  |\\.'\\   |   | ||  |   |  |_|   |   |   |  |\\.'\\   |    |       \n");
    printf("|   |  | \\  \\  |===| |==|  |   |  |_|   |===|   |  | \\  \\  |    |  \n");
    printf("|||  \\.'\\ |   |||  |||   ||   ||_|  \\.'\\ |====|   \n");
    printf("|===|--|   \\.'\\|===||--|  ||--|   |   |===|===|--|   \\.'\\|====|      \n");
    printf("^---^--^    -'---^-^--^--^---'--'---'---'---^---^--^    `-''----'        \n");
    printf("===================================================================\n");
    printf(">>>>>>>>>> SISTEMA DE CADASTRO DE USUÁRIOS DA BIBLIOTECA <<<<<<<<<<\n");
    printf("===================================================================\n\n");
}

void menu() {
    printf("                \t[1] Adicionar Usuário\n");
    printf("                \t[2] Buscar Usuário\n");
    printf("                \t[3] Listar Usuários\n");
    printf("                \t[4] Navegar Usuários\n");
    printf("                \t[5] Remover Usuário\n");
    printf("                \t[6] Salvar Dados\n");
    printf("                \t[7] Sair\n");
    printf("\n                \t> Escolha uma opção: ");
}

void saida() {
    limpa_tela();
       printf("\n\t\t (`/\\\n");
    printf("\t\t `=\\/\\ _...--~-.   .-~--..._\n");
    printf("\t\t  `=\\/\\               \\ /               \\\\\n");
    printf("\t\t   `=\\/                V                 \\\\\n");
    printf("\t\t   //\\---._  |  .---..._\\\\\n");
    printf("\t\t  //  ) (..----.\\ | /.----.....\\\\\n");
    printf("\t\t ===( INK )==========\\\\|//====================\n");
    printf("\t\t                     ---\n");
    printf("\n\n       #+===========================================================+#  \n");
    printf("      |     Sistema desenvolvido por Rafaela, Davi, Julia e Isabele   |  \n");
    printf("     |                                                                 |  \n");
    printf("      |                         - Versao 1.0 -                        |\n");
    printf("       #+===========================================================+#\n");
}

usuario* criar_usuario() {
    usuario novo = (usuario)malloc(sizeof(usuario));
    if (!novo) {
        printf("Erro ao alocar memória.\n");
        exit(1);
    }

    printf("\n                \tNome: ");
    fgets(novo->nome, sizeof(novo->nome), stdin);
    novo->nome[strcspn(novo->nome, "\n")] = '\0';

    printf("                \tTelefone: ");
    fgets(novo->telefone, sizeof(novo->telefone), stdin);
    novo->telefone[strcspn(novo->telefone, "\n")] = '\0';

    printf("                \tEmail: ");
    fgets(novo->email, sizeof(novo->email), stdin);
    novo->email[strcspn(novo->email, "\n")] = '\0';

    printf("                \tData de nascimento (DD/MM/AAAA): ");
    fgets(novo->nascimento, sizeof(novo->nascimento), stdin);
    novo->nascimento[strcspn(novo->nascimento, "\n")] = '\0';

    novo->anterior = NULL;
    novo->proximo = NULL;

    return novo;
}

void inserir_usuario() {
    limpa_tela();
    ascii();
    printf("                     >>> INSERIR NOVO USUÁRIO <<<\n");

    usuario *novo = criar_usuario();

    if (inicio == NULL) {
        inicio = novo;
    } else {
        usuario *atual = inicio;
        while (atual->proximo) {
            atual = atual->proximo;
        }
        atual->proximo = novo;
        novo->anterior = atual;
    }

    printf("\n Usuário adicionado com sucesso!\n");
    fflush(stdout);
    getchar();
}

void buscar_usuario() {
    limpa_tela();
    ascii();
    printf("                \t>>> BUSCAR USUÁRIO <<<\n");

    char busca[50];
    printf("\n                   Digite o nome do usuário: ");
    fgets(busca, sizeof(busca), stdin);
    busca[strcspn(busca, "\n")] = '\0';

    char busca_min[50];
    for (int i = 0; busca[i]; i++)
        busca_min[i] = tolower((unsigned char)busca[i]);
    busca_min[strlen(busca)] = '\0';

    usuario *atual = inicio;
    int achou = 0;

    while (atual) {
        char nome_min[100];
        for (int i = 0; atual->nome[i]; i++)
            nome_min[i] = tolower((unsigned char)atual->nome[i]);
        nome_min[strlen(atual->nome)] = '\0';

        if (strstr(nome_min, busca_min) != NULL) {
            printf("\n                \tUsuário encontrado:\n");
            printf("                \tNome: %s\n", atual->nome);
            printf("                \tTelefone: %s\n", atual->telefone);
            printf("                \tEmail: %s\n", atual->email);
            printf("                \tNascimento: %s\n", atual->nascimento);
            achou = 1;
            break;
        }

        atual = atual->proximo;
    }

    if (!achou) {
        printf("\n Usuário não encontrado!");
    }

    printf("\n Pressione Enter para voltar ao menu...");
    getchar();
}

void listar_usuarios() {
    limpa_tela();
    ascii();
    printf("                \t>>> LISTANDO USUÁRIOS <<<\n");

    if (inicio == NULL) {
        printf("\n Nenhum usuário cadastrado.\n");
    } else {
        usuario *atual = inicio;
        int i = 1;
        while (atual) {
            printf("\n                \tUsuário %d:\n", i++);
            printf("                \tNome: %s\n", atual->nome);
            printf("                \tTelefone: %s\n", atual->telefone);
            printf("                \tEmail: %s\n", atual->email);
            printf("                \tNascimento: %s\n", atual->nascimento);
            atual = atual->proximo;
        }
    }

    printf("\n Pressione Enter para voltar ao menu...");
    getchar();
}

void navegar_usuarios() {
    if (inicio == NULL) {
        limpa_tela();
        ascii();
        printf(" Nenhum usuário cadastrado para navegar.\n");
        printf(" Pressione Enter para voltar ao menu...");
        getchar();
        return;
    }

    usuario *atual = inicio;
    char opcao;

    do {
        limpa_tela();
        ascii();
        printf("                       >>> NAVEGAR USUÁRIO <<<\n\n");
        printf("                       Nome: %s\n", atual->nome);
        printf("                       Telefone: %s\n", atual->telefone);
        printf("                       Email: %s\n", atual->email);
        printf("                       Nascimento: %s\n\n", atual->nascimento);

        printf("             [P] Próximo  |  [A] Anterior  |  [S] Sair\n\n");
        printf("                       Escolha uma opção: ");
        opcao = getchar();
        while (getchar() != '\n');  

        if (opcao == 'P' || opcao == 'p') {
            if (atual->proximo != NULL) {
                atual = atual->proximo;
            } else {
                printf("\nVocê está no último usuário.\n");
                printf(" Pressione Enter para continuar...");
                getchar();
            }
        } else if (opcao == 'A' || opcao == 'a') {
            if (atual->anterior != NULL) {
                atual = atual->anterior;
            } else {
                printf("\nVocê está no primeiro usuário.\n");
                printf(" Pressione Enter para continuar...");
                getchar();
            }
        } else if (opcao == 'S' || opcao == 's') {
            break;
        } else {
            printf("\nOpção inválida. Tente novamente.\n");
            printf(" Pressione Enter para continuar...");
            getchar();
        }
    } while (1);
}

void carregar_do_arquivo() {
    FILE *arquivo = fopen("usuarios_biblioteca.txt", "r");
    if (!arquivo) return;

    char linha[200];
    while (fgets(linha, sizeof(linha), arquivo)) {
        usuario novo = (usuario)malloc(sizeof(usuario));
        sscanf(linha, "%49[^;];%19[^;];%49[^;];%10[^\n]",
               novo->nome, novo->telefone, novo->email, novo->nascimento);
        novo->anterior = NULL;
        novo->proximo = NULL;

        if (inicio == NULL) {
            inicio = novo;
        } else {
            usuario *atual = inicio;
            while (atual->proximo) atual = atual->proximo;
            atual->proximo = novo;
            novo->anterior = atual;
        }
    }

    fclose(arquivo);
}

void remover_usuario() {
    limpa_tela();
    ascii();
    printf("                       >>> REMOVER USUÁRIO <<<\n");

    char busca[50];
    printf("\n                Digite o nome do usuário a remover: ");
    fgets(busca, sizeof(busca), stdin);
    busca[strcspn(busca, "\n")] = '\0';
    

    for (usuario *atual = inicio; atual != NULL; atual = atual->proximo) {
        if (strcasecmp(atual->nome, busca) == 0) {
            if (atual->anterior) atual->anterior->proximo = atual->proximo;
            else inicio = atual->proximo;
            if (atual->proximo) atual->proximo->anterior = atual->anterior;

            free(atual);
            printf("\n Usuário removido com sucesso!\n");
            getchar();
            return;
        }
    }

    printf("\n Usuário não encontrado!\n");
    getchar();
}

void salvar_em_arquivo() {
    FILE *arquivo = fopen("usuarios_biblioteca.txt", "w");
    if (!arquivo) {
        printf("Erro ao abrir arquivo para salvamento.\n");
        return;
    }

    usuario *atual = inicio;
    while (atual) {
        fprintf(arquivo, "%s;%s;%s;%s\n", atual->nome, atual->telefone, atual->email, atual->nascimento);
        atual = atual->proximo;
    }

    fclose(arquivo);
    printf("\n  Usuarios salvos em 'usuarios_biblioteca.txt' com sucesso!\n");
    getchar();
}

int main() {
    setlocale(LC_ALL, "");

    carregar_do_arquivo();

    int opcao;

    do {
        limpa_tela();
        ascii();
        menu();
        scanf("%d", &opcao);
        getchar();

        switch (opcao) {
            case 1:
                inserir_usuario();
                break;
            case 2:
                buscar_usuario();
                break;
            case 3:
                listar_usuarios();
                break;
            case 4:
                navegar_usuarios();
                break;
            case 5:
                remover_usuario();
                break;
            case 6:
                salvar_em_arquivo();
                break;
            case 7: 
                saida();
                break;
            default:
                printf("\n Opção inválida. Tente novamente.\n");
                getchar();
        }
    } while (opcao != 7);

    return 0;
}
usuario *entrada_valida_usuario() {
    usuario *novo = (usuario *)malloc(sizeof(usuario));
    if (!novo) {
        printf("                    Erro de alocação de memória.\n");
        exit(1);
    }

    do {
        printf("                    Nome: ");
        fgets(novo->nome, sizeof(novo->nome), stdin);
        novo->nome[strcspn(novo->nome, "\n")] = '\0';

        if (!validar_nome(novo->nome)) {
            printf("                    \t > Nome inválido! Use apenas letras e espaços.\n");
        }
    } while (!validar_nome(novo->nome));

    do {
        printf("                    Telefone: ");
        fgets(novo->telefone, sizeof(novo->telefone), stdin);
        novo->telefone[strcspn(novo->telefone, "\n")] = '\0';

        if (!validar_telefone(novo->telefone)) {
            printf("                    \t > Telefone inválido! Use apenas números (mín. 8 dígitos).\n");
        }
    } while (!validar_telefone(novo->telefone));

    do {
        printf("                    Data de Nascimento (DD/MM/AAAA): ");
        fgets(novo->nascimento, sizeof(novo->nascimento), stdin);
        novo->nascimento[strcspn(novo->nascimento, "\n")] = '\0';

        if (!validar_data(novo->nascimento)) {
            printf("                    \t > Data inválida! Use o formato DD/MM/AAAA.\n");
        }
    } while (!validar_data(novo->nascimento));

    do {
        printf("                    Email: ");
        fgets(novo->email, sizeof(novo->email), stdin);
        novo->email[strcspn(novo->email, "\n")] = '\0';

        if (!validar_email(novo->email)) {
            printf("                    \t > Email inválido! Lembre-se do '@' e do '.'.\n");
        }
    } while (!validar_email(novo->email));

    novo->anterior = NULL;
    novo->proximo = NULL;

    return novo;
}
